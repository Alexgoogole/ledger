<?php

namespace App\Models\Messages;

use App\Exceptions\Breaker;
use function Symfony\Component\String\s;

abstract class Message
{
    // Message flag settings State/Function flags from bit 30 down
    public const FN_VALIDATE = 2**30;

    // Operation flags from bit 0 up.
    public const OP_ADD = 1;
    public const OP_CREATE = 2;
    public const OP_DELETE = 2**2;
    public const OP_GET = 2**3;
    public const OP_UPDATE = 2**4;

    /**
     * @var array Each element is either a property name or array of
     * [property name, operation mask]. If a mask is provided it must
     * match the current operation flags.
     */
    protected static array $copyable = [];

    private static array $opMap = [
        'add' => self::OP_ADD,
        'create' => self::OP_CREATE,
        'delete' => self::OP_DELETE,
        'get' => self::OP_GET,
        'update' => self::OP_UPDATE,
        'validate' => self::FN_VALIDATE,
    ];

    public function copy(array $data, int $opFlag): self
    {
        foreach (static::$copyable as $info) {
            if (is_array($info)) {
                [$property, $mask] = $info;
                if (is_array($property)) {
                    [$property, $fromProperty] = $property;
                } else {
                    $fromProperty = $property;
                }
            } else {
                $property = $info;
                $fromProperty = $info;
                $mask = $opFlag;
            }
            if ($opFlag & $mask && isset($data[$fromProperty])) {
                $this->{$property} = $data[$fromProperty];
            }
        }

        return $this;
    }

    /**
     * Populate the message with data from an array of request data.
     *
     * @param array $data Data generated by the request.
     * @param int $opFlag Bitmask of the request operation (may include FM_VALIDATE)
     * @return static Message initialized with relevant data.
     * @throws Breaker On error, e.g. required data is missing or on validation.
     */
    public abstract static function fromRequest(array $data, int $opFlag): self;

    /**
     * Convert a method name to an operation bitmask.
     *
     * @param string $method The method name.
     * @param int|null $disallow Optional bitmask of methods to ignore.
     * @return int Operation bitmask, zero if not recognized or disallowed.
     */
    public static function toOpFlag(string $method, int $disallow = null): int
    {
        $opFlag = self::$opMap[$method] ?? 0;
        if ($opFlag !== 0 && $disallow !== null) {
            $opFlag &= ~$disallow;
        }
        return $opFlag;
    }

    /**
     * Check the message for validity.
     *
     * @param int $opFlag Operation bitmask.
     * @return self
     * @throws Breaker When data is not valid.
     */
    public abstract function validate(int $opFlag): self;

}
